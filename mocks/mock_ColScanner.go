// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockColScanner is an autogenerated mock type for the ColScanner type
type MockColScanner struct {
	mock.Mock
}

type MockColScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockColScanner) EXPECT() *MockColScanner_Expecter {
	return &MockColScanner_Expecter{mock: &_m.Mock}
}

// Columns provides a mock function with no fields
func (_m *MockColScanner) Columns() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Columns")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockColScanner_Columns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Columns'
type MockColScanner_Columns_Call struct {
	*mock.Call
}

// Columns is a helper method to define mock.On call
func (_e *MockColScanner_Expecter) Columns() *MockColScanner_Columns_Call {
	return &MockColScanner_Columns_Call{Call: _e.mock.On("Columns")}
}

func (_c *MockColScanner_Columns_Call) Run(run func()) *MockColScanner_Columns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockColScanner_Columns_Call) Return(_a0 []string, _a1 error) *MockColScanner_Columns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockColScanner_Columns_Call) RunAndReturn(run func() ([]string, error)) *MockColScanner_Columns_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with no fields
func (_m *MockColScanner) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockColScanner_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockColScanner_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockColScanner_Expecter) Err() *MockColScanner_Err_Call {
	return &MockColScanner_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockColScanner_Err_Call) Run(run func()) *MockColScanner_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockColScanner_Err_Call) Return(_a0 error) *MockColScanner_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockColScanner_Err_Call) RunAndReturn(run func() error) *MockColScanner_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: dest
func (_m *MockColScanner) Scan(dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockColScanner_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockColScanner_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest ...interface{}
func (_e *MockColScanner_Expecter) Scan(dest ...interface{}) *MockColScanner_Scan_Call {
	return &MockColScanner_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *MockColScanner_Scan_Call) Run(run func(dest ...interface{})) *MockColScanner_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockColScanner_Scan_Call) Return(_a0 error) *MockColScanner_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockColScanner_Scan_Call) RunAndReturn(run func(...interface{}) error) *MockColScanner_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockColScanner creates a new instance of MockColScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockColScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockColScanner {
	mock := &MockColScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
